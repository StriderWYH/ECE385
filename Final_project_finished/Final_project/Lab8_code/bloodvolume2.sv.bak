module bloodvolume ( input [9:0]   DrawX, DrawY,  
							input logic [2:0] base2_HP,base1_HP, 
							output logic[18:0] address,
							output logic is_bloodvolume
);

 parameter [9:0] vol21_lu_X = 10'd570;  
 parameter [9:0] vol21_lu_Y = 10'd50;  
 parameter [9:0] vol22_lu_X = 10'd591;      
 parameter [9:0] vol22_lu_Y = 10'd50;     
 parameter [9:0] vol23_lu_X = 10'd612;      
 parameter [9:0] vol23_lu_Y = 10'd50;     
 parameter [9:0] vol24_lu_X = 10'd580;     
 parameter [9:0] vol24_lu_Y = 10'd70;      
 parameter [9:0] vol25_lu_X = 10'd601;        
 parameter [9:0] vol25_lu_Y = 10'd70; 
 parameter [9:0] vol_size = 10'd15;
 
 parameter [9:0] vol1_lu_X = 10'd10;  
 parameter [9:0] vol1_lu_Y = 10'd50;  
 parameter [9:0] vol2_lu_X = 10'd31;      
 parameter [9:0] vol2_lu_Y = 10'd50;     
 parameter [9:0] vol3_lu_X = 10'd52;      
 parameter [9:0] vol3_lu_Y = 10'd50;     
 parameter [9:0] vol4_lu_X = 10'd20;     
 parameter [9:0] vol4_lu_Y = 10'd70;      
 parameter [9:0] vol5_lu_X = 10'd41;        
 parameter [9:0] vol5_lu_Y = 10'd70; 
 
 
 
 
 /**************************** For base2 ****************************/
 
 
 int  Size;
 
 assign Size = vol_size;
 
always_comb begin
		address = 19'b0;
		is_bloodvolume = 1'b0;
		

		if(base2_HP >= 3'b001 	&& DrawX >= vol21_lu_X && DrawX <= vol21_lu_X + Size 
										&& DrawY >= vol21_lu_Y && DrawY <= vol21_lu_Y + Size)
		begin
			address = 16*(DrawY-vol21_lu_Y) + DrawX-vol21_lu_X;
			is_bloodvolume = 1'b1;
		end
		else if (base2_HP >= 3'b010 	&& DrawX >= vol22_lu_X && DrawX <= vol22_lu_X + Size 
												&& DrawY >= vol22_lu_Y && DrawY <= vol22_lu_Y + Size)
		begin
			address = 16*(DrawY-vol22_lu_Y) + DrawX-vol22_lu_X;
			is_bloodvolume = 1'b1;
		end
		else if (base2_HP >= 3'b011	&& DrawX >= vol23_lu_X && DrawX <= vol23_lu_X + Size 
												&& DrawY >= vol23_lu_Y && DrawY <= vol23_lu_Y + Size)
		begin
			address = 16*(DrawY-vol23_lu_Y) + DrawX-vol23_lu_X;
			is_bloodvolume = 1'b1;
		end
		else if (base2_HP >= 3'b100	&& DrawX >= vol24_lu_X && DrawX <= vol24_lu_X + Size 
												&& DrawY >= vol24_lu_Y && DrawY <= vol24_lu_Y + Size)
		begin
			address = 16*(DrawY-vol24_lu_Y) + DrawX-vol24_lu_X;
			is_bloodvolume = 1'b1;
		end
		else if (base2_HP >= 3'b101	&& DrawX >= vol25_lu_X && DrawX <= vol25_lu_X + Size 
												&& DrawY >= vol25_lu_Y && DrawY <= vol25_lu_Y + Size)
		begin
			address = 16*(DrawY-vol25_lu_Y) + DrawX-vol25_lu_X;
			is_bloodvolume = 1'b1;
		end
		
		
		if(base1_HP >= 3'b001 	&& DrawX >= vol1_lu_X && DrawX <= vol1_lu_X + Size 
												&& DrawY >= vol1_lu_Y && DrawY <= vol1_lu_Y + Size)
		begin
			address = 16*(DrawY-vol1_lu_Y) + DrawX-vol1_lu_X;
			is_bloodvolume = 1'b1;
		end
		else if (base1_HP >= 3'b010 	&& DrawX >= vol2_lu_X && DrawX <= vol2_lu_X + Size 
												&& DrawY >= vol2_lu_Y && DrawY <= vol2_lu_Y + Size)
		begin
			address = 16*(DrawY-vol2_lu_Y) + DrawX-vol2_lu_X;
			is_bloodvolume = 1'b1;
		end
		else if (base1_HP >= 3'b011	&& DrawX >= vol3_lu_X && DrawX <= vol3_lu_X + Size 
												&& DrawY >= vol3_lu_Y && DrawY <= vol3_lu_Y + Size)
		begin
			address = 16*(DrawY-vol3_lu_Y) + DrawX-vol3_lu_X;
			is_bloodvolume = 1'b1;
		end
		else if (base1_HP >= 3'b100	&& DrawX >= vol4_lu_X && DrawX <= vol4_lu_X + Size 
												&& DrawY >= vol4_lu_Y && DrawY <= vol4_lu_Y + Size)
		begin
			address = 16*(DrawY-vol4_lu_Y) + DrawX-vol4_lu_X;
			is_bloodvolume = 1'b1;
		end
		else if (base1_HP == 3'b101	&& DrawX >= vol5_lu_X && DrawX <= vol5_lu_X + Size 
												&& DrawY >= vol5_lu_Y && DrawY <= vol5_lu_Y + Size)
		begin
			address = 16*(DrawY-vol5_lu_Y) + DrawX-vol5_lu_X;
			is_bloodvolume = 1'b1;
		end
//		
//	 
 
 
 end	

 
	 

		
 
endmodule